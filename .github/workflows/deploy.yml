name: Deploy
on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy-preview:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 9.4.0
      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: "pnpm" }

      - name: Install dependencies
        run: pnpm i --frozen-lockfile=false

      - name: Validate required secrets
        run: |
          if [ -z "${{ secrets.ROLE_COOKIE_SECRET }}" ]; then
            echo "❌ ROLE_COOKIE_SECRET not set"
            exit 1
          fi
          if [ ${#ROLE_COOKIE_SECRET} -lt 32 ]; then
            echo "❌ ROLE_COOKIE_SECRET too short (need 32+ chars)"
            exit 1
          fi
          if [ -z "${{ secrets.JWT_SECRET }}" ]; then
            echo "❌ JWT_SECRET not set"
            exit 1
          fi
          if [ ${#JWT_SECRET} -lt 32 ]; then
            echo "❌ JWT_SECRET too short (need 32+ chars)"
            exit 1
          fi
          echo "✅ Required secrets validated"
        env:
          ROLE_COOKIE_SECRET: ${{ secrets.ROLE_COOKIE_SECRET }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}

      - name: Build all apps
        run: pnpm build
        env:
          ROLE_COOKIE_SECRET: ${{ secrets.ROLE_COOKIE_SECRET }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          NEXT_PUBLIC_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_API_BASE_URL }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

      - name: Deploy to Vercel (Preview)
        continue-on-error: true
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          scope: ${{ secrets.VERCEL_ORG_ID }}

  deploy-production:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 9.4.0
      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: "pnpm" }

      - name: Install dependencies
        run: pnpm i --frozen-lockfile=false

      - name: Validate required secrets
        run: |
          if [ -z "${{ secrets.ROLE_COOKIE_SECRET }}" ]; then
            echo "❌ ROLE_COOKIE_SECRET not set"
            exit 1
          fi
          if [ ${#ROLE_COOKIE_SECRET} -lt 32 ]; then
            echo "❌ ROLE_COOKIE_SECRET too short (need 32+ chars)"
            exit 1
          fi
          if [ -z "${{ secrets.JWT_SECRET }}" ]; then
            echo "❌ JWT_SECRET not set"
            exit 1
          fi
          if [ ${#JWT_SECRET} -lt 32 ]; then
            echo "❌ JWT_SECRET too short (need 32+ chars)"
            exit 1
          fi
          if [ -z "${{ secrets.NEXT_PUBLIC_API_BASE_URL }}" ]; then
            echo "❌ NEXT_PUBLIC_API_BASE_URL not set"
            exit 1
          fi
          echo "✅ Production secrets validated"
        env:
          ROLE_COOKIE_SECRET: ${{ secrets.ROLE_COOKIE_SECRET }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          NEXT_PUBLIC_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_API_BASE_URL }}

      - name: Run security checks
        run: |
          pnpm typecheck
          pnpm lint -- --max-warnings=0
          pnpm node scripts/license-check.mjs

      - name: Build all apps
        run: pnpm build
        env:
          ROLE_COOKIE_SECRET: ${{ secrets.ROLE_COOKIE_SECRET }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          NEXT_PUBLIC_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_API_BASE_URL }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

      - name: Test health endpoints
        run: |
          # Build API first
          pnpm --filter @carelink/api build

          # Start API server in background
          pnpm --filter @carelink/api start &
          API_PID=$!
          sleep 5

          # Test health endpoint (API runs on port 4000, not 3001)
          curl -f http://localhost:4000/v1/health || exit 1

          # Clean up
          kill $API_PID

      - name: Deploy to Vercel (Production)
        continue-on-error: true
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: "--prod"
          working-directory: ./
          scope: ${{ secrets.VERCEL_ORG_ID }}

  post-deploy-checks:
    needs: deploy-production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Wait for deployment
        run: sleep 30

      - name: Check production health
        run: |
          if [ -n "${{ secrets.NEXT_PUBLIC_API_BASE_URL }}" ]; then
            echo "Testing production API health..."
            curl -f "${{ secrets.NEXT_PUBLIC_API_BASE_URL }}/v1/health" || exit 1
            echo "✅ Production API healthy"
          fi

      - name: Security headers check
        run: |
          if [ -n "${{ secrets.PRODUCTION_URL }}" ]; then
            echo "Checking security headers..."
            
            # Get headers once to avoid multiple requests
            HEADERS=$(curl -I "${{ secrets.PRODUCTION_URL }}" 2>/dev/null)
            
            # Check for HSTS header
            if echo "$HEADERS" | grep -qi "strict-transport-security"; then
              echo "✅ Strict-Transport-Security header found"
            else
              echo "❌ Strict-Transport-Security header missing"
              exit 1
            fi
            
            # Check for CSP header (can be named differently)
            if echo "$HEADERS" | grep -qi -E "(content-security-policy|content-security-policy-report-only)"; then
              echo "✅ Content-Security-Policy header found"
            else
              echo "⚠️  Content-Security-Policy header not found (this is optional for some deployments)"
              # Don't fail on missing CSP since it might be set differently in production
            fi
            
            echo "✅ Security headers check completed"
          else
            echo "⚠️  PRODUCTION_URL not set, skipping security headers check"
          fi
